generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  email          String   @unique
  password       String
  name           String
  username       String   @unique
  profileImage   String?
  hashedPassword String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  followers      String[] @default([]) @db.ObjectId
  following      String[] @default([]) @db.ObjectId

  posts    Post[]
  stories  Story[]
  comments Comment[]
}

model Post {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  description String?
  images      String[]  @default([])
  postedBy    String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [postedBy], references: [id], onDelete: Cascade)
  comments    Comment[]
}

model Story {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  image        String
  postedBy     String   @db.ObjectId
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  vizualizedBy String[] @default([]) @db.ObjectId
  user         User     @relation(fields: [postedBy], references: [id], onDelete: Cascade)
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.ObjectId
  postedBy  String   @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [postedBy], references: [id], onDelete: Cascade)
}

model Notification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  type       String
  fromUserId String   @db.ObjectId
  toUserId   String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
